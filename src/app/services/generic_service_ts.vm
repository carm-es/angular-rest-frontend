// File generated by $generator.name ( version $generator.version ) - Date $today.date("yyyy-MM-dd") ( Time $today.time )

import { Configuration } from './../app.configuration';
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';
import { Observable, throwError} from 'rxjs';
import { catchError, map } from 'rxjs/operators';

export abstract class GenericService<T> {

    protected headers: HttpHeaders;
    protected actionUrl: string;

    constructor(private _http: HttpClient, private _configuration: Configuration, private url: string) {
        this.actionUrl = _configuration.serverWithApiUrl + url;
        this.headers = new HttpHeaders();
        this.headers.append('Content-Type', 'application/json');
        this.headers.append('Accept', 'application/json');
    }

    /**
     * Get all object by the GET Rest service
     * @return promise
     */
    public getAll(): Observable<T[]> {
     return this._http.get<T[]>(this.actionUrl)
       .pipe(
         catchError(this.handleError)
       );
    }

    /**
     * Get the object by the GET/:id Rest service
     * @param keys array of Identifiers
     * @return promise
     */
    public getSingle(keys: any[]): Observable<T> {
     return this._http.get<T>(this.actionUrl + this.getKeysUrl(keys))
       .pipe(
         catchError(this.handleError)
       );
    }

    /**
     * Add the object by the POST Rest service
     * @param newT The object to POST
     * @param t Object to update
     * @return promise
     */
    public add(newT: T): Observable<T> {
     return this._http.post<T>(this.actionUrl, JSON.stringify(newT), { headers: this.headers })
       .pipe(
         catchError(this.handleError)
       );
    }

    /**
     * Update the object by the UPDATE Rest service
     * @param t Object to update
     * @param keys array of Identifiers
     * @return promise
     */
    public update(t: T, keys: any[]): Observable<T> {
     return this._http.put<T>(this.actionUrl + this.getKeysUrl(keys), JSON.stringify(t), { headers: this.headers })
       .pipe(
         catchError(this.handleError)
       );
    }

    /**
     * Delete the object by the DELETE Rest service
     * @param keys array of Identifiers
     * @return promise
     */
    public delete(...keys: any[]): Observable<HttpResponse<any>> {
     return this._http.delete<HttpResponse<any>>(this.actionUrl + this.getKeysUrl(keys))
       .pipe(
         catchError(this.handleError)
       );
    }

    // Function to throw errors
    private handleError(error: any): Observable<never> {
     return throwError(() => error);
    }

    /**
     * Function to return the url of many identifiers
     * @param keys array of Identifiers
     * @return promise
     */
    private getKeysUrl = (keys: any[]): string => {
        let idsUrl = '';

        keys.forEach(element => {
            idsUrl += `${DOLLAR}{element}/`;
        });

        return idsUrl;
    }
}
