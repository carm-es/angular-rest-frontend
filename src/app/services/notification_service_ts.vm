// File generated by $generator.name ( version $generator.version ) - Date $today.date("yyyy-MM-dd") ( Time $today.time )

import { Notification } from './notification.model';
import { EmitterService } from './emitter.service';
import { NotifierService } from 'angular-notifier';
import { Injectable } from '@angular/core';

@Injectable()
export class NotificationService {

  static readonly NOTIFICATION_ID = 'NOTIFICATION';

  constructor(private _notificationsService: NotifierService) { }

  public init = () => {
    // Listen to the 'notification' emitted event so as populate the model with the event payload
    EmitterService
        .get(NotificationService.NOTIFICATION_ID)
        .subscribe( (notif: Notification) => this.showNotif(notif) );
  }

  /**
   * Info message
   * @param title Title
   * @param message Message
   */
  public default = (title: string, message: string): void => {
      // Setting up the notification to send
      const notif: Notification = {
        type: 'default',
        message: message,
		id: NotificationService.NOTIFICATION_ID
      };

      // Notify app component to show the notification
      EmitterService.get(NotificationService.NOTIFICATION_ID).emit(notif);
  }

  /**
   * Info message
   * @param title Title
   * @param message Message
   */
  public info = (title: string, message: string): void => {
      // Setting up the notification to send
      const notif: Notification = {
        type: 'info',
        message: message,
		id: NotificationService.NOTIFICATION_ID
      };

      // Notify app component to show the notification
      EmitterService.get(NotificationService.NOTIFICATION_ID).emit(notif);
  }

  /**
   * Success message
   * @param title Title
   * @param message Message
   */
  public success = (title: string, message: string): void => {
      // Setting up the notification to send
      const notif: Notification = {
        type: 'success',
        message: message,
		id: NotificationService.NOTIFICATION_ID
      };

      // Notify app component to show the notification
      EmitterService.get(NotificationService.NOTIFICATION_ID).emit(notif);
  }

  


  /**
   * Warn message
   * @param title Title
   * @param message Message
   */
  public warn = (title: string, message: string): void => {
      // Setting up the notification to send
      const notif: Notification = {
        type: 'warning',
        message: message,
		id: NotificationService.NOTIFICATION_ID
      };

      // Notify app component to show the notification
      EmitterService.get(NotificationService.NOTIFICATION_ID).emit(notif);
  }

  /**
   * Error message
   * @param title Title
   * @param message Message
   */
  public error = (title: string, message: string): void => {
      // Setting up the notification to send
      const notif: Notification = {
        type: 'error',
        message: message,
		id: NotificationService.NOTIFICATION_ID
      };

      // Notify app component to show the notification
      EmitterService.get(NotificationService.NOTIFICATION_ID).emit(notif);
  }

  // Function to show notification depending on the type
  showNotif = (notif: Notification): void => {
    this._notificationsService.show(notif);
  }
}
